<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setId($value)
    {
        $this->__load();
        return parent::setId($value);
    }

    public function getCreateDate()
    {
        $this->__load();
        return parent::getCreateDate();
    }

    public function setCreateDate($value)
    {
        $this->__load();
        return parent::setCreateDate($value);
    }

    public function prePersistSetCreateDate()
    {
        $this->__load();
        return parent::prePersistSetCreateDate();
    }

    public function getUpdateDate()
    {
        $this->__load();
        return parent::getUpdateDate();
    }

    public function setUpdateDate($value)
    {
        $this->__load();
        return parent::setUpdateDate($value);
    }

    public function preUpdateSetUpdateDate()
    {
        $this->__load();
        return parent::preUpdateSetUpdateDate();
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setUsername($value)
    {
        $this->__load();
        return parent::setUsername($value);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setEmail($value)
    {
        $this->__load();
        return parent::setEmail($value);
    }

    public function getPlayer()
    {
        $this->__load();
        return parent::getPlayer();
    }

    public function setPlayer($value)
    {
        $this->__load();
        return parent::setPlayer($value);
    }

    public function getPlayerForumId()
    {
        $this->__load();
        return parent::getPlayerForumId();
    }

    public function setPlayerForumId($value)
    {
        $this->__load();
        return parent::setPlayerForumId($value);
    }

    public function getPlayerKagName()
    {
        $this->__load();
        return parent::getPlayerKagName();
    }

    public function setPlayerKagName($value)
    {
        $this->__load();
        return parent::setPlayerKagName($value);
    }

    public function getPlayerVerificationToken()
    {
        $this->__load();
        return parent::getPlayerVerificationToken();
    }

    public function setPlayerVerificationToken($value)
    {
        $this->__load();
        return parent::setPlayerVerificationToken($value);
    }

    public function generateToken()
    {
        $this->__load();
        return parent::generateToken();
    }

    public function checkKagForumToken()
    {
        $this->__load();
        return parent::checkKagForumToken();
    }

    public function getPlayerVerified()
    {
        $this->__load();
        return parent::getPlayerVerified();
    }

    public function setPlayerVerified($value)
    {
        $this->__load();
        return parent::setPlayerVerified($value);
    }

    public function getLastSeen()
    {
        $this->__load();
        return parent::getLastSeen();
    }

    public function setLastSeen($value)
    {
        $this->__load();
        return parent::setLastSeen($value);
    }

    public function seen()
    {
        $this->__load();
        return parent::seen();
    }

    public function addBuddy($player)
    {
        $this->__load();
        return parent::addBuddy($player);
    }

    public function addBuddyBuddy($buddy)
    {
        $this->__load();
        return parent::addBuddyBuddy($buddy);
    }

    public function buddyExists($player)
    {
        $this->__load();
        return parent::buddyExists($player);
    }

    public function getBuddy($player)
    {
        $this->__load();
        return parent::getBuddy($player);
    }

    public function removeBuddy($player)
    {
        $this->__load();
        return parent::removeBuddy($player);
    }

    public function removeBuddyBuddy(\Entities\Buddy $buddy)
    {
        $this->__load();
        return parent::removeBuddyBuddy($buddy);
    }

    public function getBuddies()
    {
        $this->__load();
        return parent::getBuddies();
    }

    public function getOnlineBuddyCount()
    {
        $this->__load();
        return parent::getOnlineBuddyCount();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'username', 'createDate', 'updateDate', 'email', 'playerKagName', 'playerForumId', 'playerVerified', 'playerVerificationToken', 'lastSeen', 'player', 'buddies');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}